library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

Entity Vmac is 
Port (
Selec: in STD_LOGIC
Rep: in STD_LOGIC_VECTOR (3 downto 0)
Din : in STD_LOGIC
GT: in STD_LOGIC
EQ: in STD_LOGIC
LT: in STD_LOGIC
QTD_disp: in STD_LOGIC_VECTOR (3 downto 0)
CLK: in STD_LOGIC
RESET: in STD_LOGIC

REG_SELECT_LD : out STD_LOGIC
REG_DIN_TOT_CLR: out STD_LOGIC
ROM_PRECO_EN: out STD_LOGIC
RAM_ QTD_RD: out STD_LOGIC
RAM_QTD_WR: out STD_LOGIC
RAM_QTD_ADDR_SEL: out STD_LOGIC
DISPENSE_EN: out STD_LOGIC

);
END Vmac;

architeture behavioral of Vmac is

type state_type is (ESPERA, PRODX, ADD_DIN, DISP, REP_PRODX, AT_QTD)
--ESTADOS REDUZIDOS PARA APENAS UM PRODUTO, AUMENTANDO EM 2 O NUMERO DE ESTADOS PARA CADA PRODUTO NOVO ADICIONADO (ADICIONA-SE MAIS UM PROD E MAIS UM REP_PROD, ESTADOS RELATIVOS AO PRODUTO E A REPOSIÇÃO DO MESMO RESPECTIVAMENTE) --
SIGNAL CURRENT_STATE, NEXT_STAGE: STATE_TYPE
BEGIN

IF SELEC= '0' THEN CURRENT_STATE <= ESPERA
END IF;

END PROCESS;

NEXT_STATE_LOGIC:
PROCESS (CURRENT_STATE, INPUT)
BEGIN
NEXT_STAGE <= CURRENT_STATE;

CASE CURRENT_STATE IS
WHEN ESPERA=> 
	IF SELEC = "11" THEN NEXT_STAGE <= PRODX;
    ELSIF INPUT = "00" OR "01" THEN NEXT_STAGE <= CURRENT_STAGE
    
WHEN PRODX=>
		OUTPUT <= PRECO_X, QTD_DISPX
        
        IF REP <= '1' THEN NEXT_STAGE <= REP_PRODX
        ELSIF 


